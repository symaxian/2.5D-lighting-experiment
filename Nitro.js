// Nitro.js - v0.0.3
"use strict";
var Nitro;
(function (Nitro) {
    let MountedState;
    (function (MountedState) {
        MountedState[MountedState["NOT_MOUNTED"] = 0] = "NOT_MOUNTED";
        MountedState[MountedState["MOUNTED_UNDER_ANOTHER_COMPONENT"] = 1] = "MOUNTED_UNDER_ANOTHER_COMPONENT";
        MountedState[MountedState["MOUNTED_DIRECTLY_UNDER_ELEMENT"] = 2] = "MOUNTED_DIRECTLY_UNDER_ELEMENT";
    })(MountedState || (MountedState = {}));
    Nitro.DEBUG_MODE = true; // TODO: Provide compiled versions of Nitro with this set to false and related code removal performed?
    Nitro.DIGEST_USING_MICROTASKS = true; // If true then digesting will be performed in a microtask, else requestAnimationFrame will be used. Digesting in a microtask will result in more immediate updates but may result in extra digests in certain circumstances.
    var _dirtyComponents = [];
    var _pendingRaf = -1;
    var _microtaskPending = false;
    var _digestOnNextMicrotask = false;
    // var halted = false;
    // function halt() {
    // 	halted = true;
    // }
    // Invoke this method if for some reason you would like for Nitro to immediately re-render all dirtied components rather than wait until the next RAF/microtask event.
    function digest() {
        // if (halted) return;
        rerenderAllDirtyComponents();
        // If the user requested that we go ahead and digest immediately rather than waiting for the next RAF, cancel the RAF request.
        if (_pendingRaf !== -1) {
            window.cancelAnimationFrame(_pendingRaf);
            _pendingRaf = -1;
        }
        // We cannot cancel microtasks, but we can tell our microtask handler to not perform the digest
        if (_microtaskPending) {
            _digestOnNextMicrotask = false;
        }
    }
    Nitro.digest = digest;
    // Note: It is common that a component will be dirtied in the middle of a RAF event.
    // In that case where a parent is dirtying a child(usually by passing it new input) the child is simply appended to the end of the list of dirtied components and rerendered at the end of the current RAF event.
    // TODO: Would it be an optimization to ensure that rerenders happen from top to bottom? As rendering a component will often dirty a child. If we rerender at an arbitrary order we could rerender the child, then parent, then child again.
    function componentWasDirtied(component) {
        // if (halted) return;
        _dirtyComponents.push(component);
        if (Nitro.DIGEST_USING_MICROTASKS) {
            if (!_microtaskPending) {
                window['queueMicrotask'](queueMicrotaskCallback);
            }
            _digestOnNextMicrotask = true; // Must set this to true whether a microtask is pending or not, in case Nitro.digest() was invoked while a microtask was still pending, then a component is dirtied.
        }
        else if (_pendingRaf === -1) {
            _pendingRaf = window.requestAnimationFrame(requestAnimationFrameCallback);
        }
    }
    function queueMicrotaskCallback() {
        _microtaskPending = false;
        rerenderAllDirtyComponents();
    }
    function requestAnimationFrameCallback() {
        _pendingRaf = -1;
        rerenderAllDirtyComponents();
    }
    function rerenderAllDirtyComponents() {
        try {
            for (const component of _dirtyComponents) {
                // It is possible to have a component in this list that has already be re-rendered if the component was given new input then was added to an element using the children() method as the children() method calls getElement().
                component.getElement();
            }
            _dirtyComponents = [];
        }
        catch (e) {
            console.error('Exception thrown during Nitro.digest().');
            _dirtyComponents = [];
            throw e;
        }
    }
    function removeDirtyComponent(component) {
        const index = _dirtyComponents.indexOf(component);
        if (index !== -1)
            _dirtyComponents.splice(index, 1);
    }
    class Component {
        constructor() {
            this.key = null;
            this._dirty = true;
            this.element = null;
            this._renderer = null;
            this._mountedState = 0 /* MountedState.NOT_MOUNTED */;
            this.input = null;
            if (this.render.length) { // Only instantiate a Renderer if the render method supplied by the subclass takes it as an argument
                this._renderer = new Renderer();
            }
        }
        setInput(input) {
            const previous = this.input;
            if (previous !== null || input !== null) { // A special case, don't bother invoking inputChanged() if going from null to null
                this.input = input;
                this.inputChanged(previous, input);
            }
            this.setDirty();
        }
        inputChanged(previous, current) { } // Can be overidden by subclass
        setDirty() {
            if (!this._dirty) {
                this._dirty = true;
                componentWasDirtied(this);
            }
        }
        isMounted() {
            return this._mountedState !== 0;
        }
        mountUnder(parent) {
            if (Nitro.DEBUG_MODE && this._mountedState)
                throw new Error('mountUnder() called on a component that is already mounted');
            parent.appendChild(this.getElement());
            invokeWasMountedForElement(this.element);
            this._mountedState = 2 /* MountedState.MOUNTED_DIRECTLY_UNDER_ELEMENT */; // the __was_mounted callback will set this to MOUNTED_UNDER_ANOTHER_COMPONENT, so overwrite that here with the correct state
        }
        unmount() {
            if (Nitro.DEBUG_MODE && this._mountedState !== 2 /* MountedState.MOUNTED_DIRECTLY_UNDER_ELEMENT */) {
                throw new Error('Cannot unmount component, component has not been mounted using Component.mountUnder(parent: HTMLElement)');
            }
            this.element.parentElement.removeChild(this.element);
            invokeWasUnmountedForElement(this.element);
        }
        wasMounted() { } // Can be overidden by subclass
        wasUnmounted() { } // Can be overidden by subclass
        getElement() {
            if (this._dirty) {
                this.rerender();
            }
            return this.element;
        }
        rerender() {
            let rendered;
            const renderer = this._renderer;
            try {
                if (renderer === null) {
                    rendered = this.render();
                }
                else {
                    renderer.setupForNewRenderPass();
                    rendered = this.render(renderer);
                    // renderer.clearLeftoverState();
                }
            }
            catch (e) {
                removeDirtyComponent(this);
                throw e;
            }
            if (Nitro.DEBUG_MODE && this.element === null && !(rendered instanceof HTMLElement)) {
                throw new Error('Element for component ' + this.constructor.name + ' is not defined and render() did not return an instance of HTMLElement!');
            }
            if (rendered !== undefined) {
                if (Nitro.DEBUG_MODE && this.element !== null && rendered !== this.element) {
                    removeDirtyComponent(this);
                    throw new Error('Nitro does not support swapping out the root element of a component! Component: ' + this.constructor.name + '. You may need to add a key to the root element of the component.');
                }
                if (this.element === null) {
                    this.element = rendered;
                }
            }
            if (this.element.__was_mounted === undefined) {
                this.attachMountHandlers(this.element);
            }
            this._dirty = false;
        }
        attachMountHandlers(element) {
            element.__was_mounted = () => {
                if (!this._mountedState) { // This check is necessary in the event that a component is being moved from one location in the DOM to another, TODO: Handle this in a more elegant manner?
                    this._mountedState = 1 /* MountedState.MOUNTED_UNDER_ANOTHER_COMPONENT */;
                    this.wasMounted();
                    if (this._dirty)
                        componentWasDirtied(this);
                }
            };
            element.__was_unmounted = () => {
                this._mountedState = 0 /* MountedState.NOT_MOUNTED */;
                this.wasUnmounted();
            };
        }
        childByKey(key) {
            if (this._renderer === null)
                return null;
            return this._renderer.getElementByKey(key);
        }
    }
    Nitro.Component = Component;
    class PureComponent extends Component {
        setInput(input) {
            if (Nitro.DEBUG_MODE && typeof input !== 'object')
                throw new Error('Non-object input value given to instance of PureComponent, this will produce undesired behavior.');
            const previous = this.input;
            let didChange = false;
            if (previous === null) {
                didChange = true;
            }
            else {
                for (const key in input) {
                    if (previous[key] !== input[key]) {
                        didChange = true;
                        break;
                    }
                }
            }
            if (didChange) {
                this.input = input;
                this.inputChanged(previous, input);
                this.setDirty();
            }
        }
    }
    Nitro.PureComponent = PureComponent;
    var blankElement = document.createElement('div'); // Keep a blank element to query what the default values for fields are, is there a better approach?
    function clearProperty(element, name) {
        const lowerCaseName = name.toLowerCase();
        if (lowerCaseName in element)
            name = lowerCaseName; // Use the lowercase name for event handlers
        if (name.startsWith('data-')) {
            element.removeAttribute(name);
        }
        else {
            element[name] = blankElement[name];
        }
    }
    function setProperty(element, name, value) {
        if (value === undefined) {
            // If "undefined" is sent, clear the property
            clearProperty(element, name);
            return;
        }
        const lowerCaseName = name.toLowerCase();
        if (lowerCaseName in element)
            name = lowerCaseName; // Use the lowercase name for event handlers
        if (name === 'style' && typeof value === 'object') {
            element.setAttribute('style', ''); // Clear all styles before setting the new ones, is there a better approach here?
            for (const styleKey in value) {
                element.style[styleKey] = value[styleKey];
            }
        }
        else if (name.startsWith('data-')) {
            element.setAttribute(name, value);
        }
        else if (name !== 'children') {
            element[name] = value;
        }
    }
    function updateElement(element, attributes) {
        const previousAttributes = element.__attributes;
        // Clear any properties not part of the new set
        for (const prevAttributeName in previousAttributes) {
            if (attributes === null || !(prevAttributeName in attributes)) {
                clearProperty(element, prevAttributeName);
            }
        }
        // Set new properties, if the value is not equivalent to the previous value
        for (const attributeName in attributes) {
            if (attributeName !== 'key') {
                if (previousAttributes === null || previousAttributes[attributeName] !== attributes[attributeName]) {
                    setProperty(element, attributeName, attributes[attributeName]);
                }
            }
        }
        element.__attributes = attributes;
    }
    class Renderer {
        constructor() {
            this.components = [];
            this.previousComponents = [];
            this.elements = [];
            this.previousElements = [];
        }
        create(tagNameOrComponentClass, inputOrProperties, ...children) {
            const key = (inputOrProperties === null || inputOrProperties.key === undefined) ? null : inputOrProperties.key;
            if (children.length > 0) {
                if (inputOrProperties === null) {
                    inputOrProperties = { children: children };
                }
                else {
                    inputOrProperties.children = children;
                }
            }
            if (typeof tagNameOrComponentClass === 'string') {
                let elem = null;
                const previousElements = this.previousElements;
                // If a key was specified, look for a previous element with the same key
                if (typeof key === 'string') {
                    for (let i = 0; i < previousElements.length; i++) {
                        const previousElement = previousElements[i];
                        const previousElementKey = previousElement.__attributes ? previousElement.__attributes.key : undefined;
                        if (previousElementKey === key) {
                            if (Nitro.DEBUG_MODE && previousElement.tagName !== tagNameOrComponentClass.toUpperCase()) {
                                throw new Error('Cannot reuse key for an element of a different tagName, current: ' + previousElement.tagName + ', new: ' + tagNameOrComponentClass.toUpperCase() + '.');
                            }
                            previousElements.splice(i, 1);
                            updateElement(previousElement, inputOrProperties);
                            elem = previousElement;
                            break;
                        }
                    }
                }
                if (elem === null) {
                    // No key was specified or an element with the same key was not found, look for a previous element with the same tag name that does not have a key
                    for (let i = 0; i < previousElements.length; i++) {
                        const previousElement = previousElements[i];
                        const previousElementKey = previousElement.__attributes ? previousElement.__attributes.key : undefined;
                        if (previousElementKey === undefined && previousElement.tagName.toLowerCase() === tagNameOrComponentClass.toLowerCase()) {
                            previousElements.splice(i, 1);
                            updateElement(previousElement, inputOrProperties);
                            elem = previousElement;
                            break;
                        }
                    }
                }
                if (elem === null) {
                    // No element to reuse, create a new one
                    elem = document.createElement(tagNameOrComponentClass);
                    if (inputOrProperties !== null) {
                        for (const propertyName in inputOrProperties) {
                            if (propertyName !== 'key') {
                                setProperty(elem, propertyName, inputOrProperties[propertyName]);
                            }
                        }
                    }
                    elem.__attributes = inputOrProperties;
                }
                const newChildren = [];
                children = flatten(children); // TODO: Optimize
                for (const child of children) {
                    if (child !== null && child !== false) {
                        let childElem;
                        if (typeof child === 'string') {
                            childElem = document.createTextNode(child);
                        }
                        else if (child instanceof HTMLElement) {
                            childElem = child;
                        }
                        else {
                            if (Nitro.DEBUG_MODE && !(child instanceof Nitro.Component))
                                throw new Error('Cannot treat value as child: ' + child + ', must be a string, HTMLElement, Component, null, or false.');
                            childElem = child.getElement();
                        }
                        newChildren.push(childElem);
                    }
                }
                updateElementChildren(elem, newChildren);
                this.elements.push(elem);
                return elem;
            }
            let component = null;
            const previousComponents = this.previousComponents;
            // If a key was specified, look for a previous component with the same key
            if (typeof key === 'string') {
                for (let i = 0; i < previousComponents.length; i++) {
                    const previousComponent = previousComponents[i];
                    if (previousComponent.key === key) { // FIXME: What if the user attaches the same key to a component of a different type?
                        if (Nitro.DEBUG_MODE && !(previousComponent instanceof tagNameOrComponentClass)) {
                            throw new Error('Cannot reuse key for a component of a different class, current: ' + previousComponent.constructor.name + ', new: ' + tagNameOrComponentClass.name + '.');
                        }
                        previousComponents.splice(i, 1);
                        component = previousComponent;
                        break;
                    }
                }
            }
            if (component === null) {
                // No key was specified or a component with the same key was not found, look for a previous component of the same type that does not have a key
                for (let i = 0; i < previousComponents.length; i++) {
                    const previousComponent = previousComponents[i];
                    if (previousComponent.key === null && previousComponent instanceof tagNameOrComponentClass) {
                        previousComponents.splice(i, 1);
                        component = previousComponent;
                        break;
                    }
                }
            }
            if (component === null) {
                // No component to reuse, create a new one
                component = new tagNameOrComponentClass();
            }
            component.setInput(inputOrProperties);
            component.key = key;
            this.components.push(component);
            return component.getElement();
        }
        setupForNewRenderPass() {
            this.previousComponents = this.components;
            this.components = [];
            this.previousElements = this.elements;
            this.elements = [];
        }
        getElementByKey(key) {
            for (const elem of this.elements) {
                const attributes = elem.__attributes;
                if (attributes && typeof attributes.key === 'string' && attributes.key === key) {
                    return elem;
                }
            }
            for (const component of this.components) {
                if (component.key === key)
                    return component;
            }
            return null;
        }
    }
    Nitro.Renderer = Renderer;
    function updateElementChildren(parent, children) {
        const parentIsMounted = document.body.contains(parent); // TODO: Is there a faster method?
        const currentChildren = parent.childNodes;
        let indexIntoCurrentChildren = 0;
        let indexIntoNewChildren = 0;
        while (indexIntoNewChildren < children.length) {
            const currentChild = currentChildren[indexIntoCurrentChildren];
            const newChild = children[indexIntoNewChildren];
            if (currentChild === undefined) {
                parent.appendChild(newChild);
                if (parentIsMounted && newChild instanceof Element)
                    invokeWasMountedForElement(newChild);
                indexIntoCurrentChildren++;
                indexIntoNewChildren++;
                continue;
            }
            if (currentChildren[indexIntoCurrentChildren] === newChild) {
                indexIntoCurrentChildren++;
                indexIntoNewChildren++;
            }
            else {
                const oldChild = currentChildren[indexIntoCurrentChildren];
                parent.replaceChild(newChild, oldChild);
                if (parentIsMounted) {
                    if (oldChild instanceof Element && children.indexOf(oldChild) === -1) {
                        invokeWasUnmountedForElement(oldChild);
                    }
                    if (newChild instanceof Element)
                        invokeWasMountedForElement(newChild);
                }
                indexIntoCurrentChildren++;
                indexIntoNewChildren++;
            }
        }
        // Remove leftover children unaccounted for
        let remainingChildCount = currentChildren.length - indexIntoCurrentChildren;
        while (remainingChildCount > 0) {
            const lastChild = parent.lastChild;
            parent.removeChild(lastChild);
            if (parentIsMounted && lastChild instanceof Element)
                invokeWasUnmountedForElement(lastChild);
            remainingChildCount--;
        }
    }
    function invokeWasMountedForElement(element) {
        if (element.__was_mounted) {
            element.__was_mounted();
        }
        const children = element.children;
        for (let i = 0; i < children.length; i++) {
            invokeWasMountedForElement(children[i]);
        }
    }
    function invokeWasUnmountedForElement(element) {
        if (element.__was_unmounted) {
            element.__was_unmounted();
        }
        const children = element.children;
        for (let i = 0; i < children.length; i++) {
            invokeWasUnmountedForElement(children[i]);
        }
    }
    function flatten(items) {
        const flattened = [];
        const length = items.length;
        for (let i = 0; i < length; i++) {
            const item = items[i];
            if (Array.isArray(item)) {
                flattened.push(...item);
            }
            else {
                flattened.push(item);
            }
        }
        return flattened;
    }
    function updateChildren(parent, children) {
        const childElements = children.map(child => {
            if (child instanceof Nitro.Component) {
                return child.getElement();
            }
            return child;
        });
        updateElementChildren(parent, childElements);
    }
    Nitro.updateChildren = updateChildren;
})(Nitro || (Nitro = {}));
window['Nitro'] = Nitro;
//# sourceMappingURL=data:application/json;base64,