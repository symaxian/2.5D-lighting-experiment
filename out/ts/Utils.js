"use strict";
var Utils;
(function (Utils) {
    function createCanvas(width, height, willReadFrequently = false) {
        const canvas = document.createElement('canvas');
        canvas.width = width;
        canvas.height = height;
        if (willReadFrequently) {
            return canvas.getContext('2d', {
                'willReadFrequently': true
            });
        }
        return canvas.getContext('2d');
    }
    Utils.createCanvas = createCanvas;
    function listenToMouseMoveUntilMouseUp(onpointermove, onpointerup = null, cursorOverride = null) {
        // console.log('pointer down');
        assert(window['onpointermove'] === null);
        assert(window['onpointerup'] === null);
        window['onpointermove'] = onpointermove;
        if (cursorOverride !== null) {
            document.body.classList.add('force-' + cursorOverride);
        }
        window['onpointerup'] = (e) => {
            // console.log('pointer up');
            window['onpointermove'] = null;
            window['onpointerup'] = null;
            if (cursorOverride !== null) {
                document.body.classList.remove('force-' + cursorOverride);
            }
            if (onpointerup !== null)
                onpointerup(e);
        };
    }
    Utils.listenToMouseMoveUntilMouseUp = listenToMouseMoveUntilMouseUp;
    function listenToPointerMoveUntilPointerDown(onpointermove, onpointerdown = null) {
        // Bracket notation is used here because the older version of Closure being used will minify these names
        assert(window['onpointermove'] === null);
        assert(window['onpointerdown'] === null);
        window['onpointermove'] = onpointermove;
        window['onpointerdown'] = (e) => {
            window['onpointermove'] = null;
            window['onpointerdown'] = null;
            if (onpointerdown !== null)
                onpointerdown(e);
        };
    }
    Utils.listenToPointerMoveUntilPointerDown = listenToPointerMoveUntilPointerDown;
    function pythagoreanDistance(x1, y1, x2, y2) {
        const x = x2 - x1;
        const y = y2 - y1;
        return Math.sqrt(x * x + y * y);
    }
    Utils.pythagoreanDistance = pythagoreanDistance;
    function pythagoreanDistanceSquared(x1, y1, x2, y2) {
        const x = x2 - x1;
        const y = y2 - y1;
        return x * x + y * y;
    }
    Utils.pythagoreanDistanceSquared = pythagoreanDistanceSquared;
    function pythagoreanDistanceSquared3(x1, y1, z1, x2, y2, z2) {
        const x = x2 - x1;
        const y = y2 - y1;
        const z = z2 - z1;
        return x * x + y * y + z * z;
    }
    Utils.pythagoreanDistanceSquared3 = pythagoreanDistanceSquared3;
    function radiansToDegrees(radians) {
        return radians * 180 / Math.PI;
    }
    Utils.radiansToDegrees = radiansToDegrees;
    function degreesToRadians(degrees) {
        return degrees * Math.PI / 180;
    }
    Utils.degreesToRadians = degreesToRadians;
    function getRadianAngleForDirection(direction) {
        switch (direction) {
            case 0 /* Direction.NORTH */: return 3 * Math.PI / 2;
            case 1 /* Direction.SOUTH */: return Math.PI / 2;
            case 3 /* Direction.EAST */: return 0;
            case 2 /* Direction.WEST */: return Math.PI;
        }
    }
    Utils.getRadianAngleForDirection = getRadianAngleForDirection;
})(Utils || (Utils = {}));
//# sourceMappingURL=data:application/json;base64,