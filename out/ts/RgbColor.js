"use strict";
class RgbColor {
    r;
    g;
    b;
    a;
    constructor(r, g, b, a = 255) {
        this.r = r;
        this.g = g;
        this.b = b;
        this.a = a;
    }
    isBlack() {
        return this.r === 0 && this.g === 0 && this.b === 0;
    }
    toCss() {
        return 'rgb(' + this.r + ',' + this.g + ',' + this.b + ',' + this.a / 255 + ')';
    }
    pack() {
        return Colors.pack(this.r, this.g, this.b, this.a);
    }
    static parseColorString(input) {
        if (input.startsWith('rgb(')) {
            const values = input.substr(4).split(',');
            return new RgbColor(parseInt(values[0], 10), parseInt(values[1], 10), parseInt(values[2], 10));
        }
        if (input.startsWith('#') || input.length === 6) {
            return new RgbColor(parseInt(input.substr(0, 2), 16), parseInt(input.substr(2, 2), 16), parseInt(input.substr(4, 2), 16));
        }
        return new RgbColor(255, 255, 255);
    }
}
var Colors;
(function (Colors) {
    function pack(r, g, b, a = 255) {
        return (r << 0) | (g << 8) | (b << 16) | (a << 24);
    }
    Colors.pack = pack;
    function unpack(color) {
        return new RgbColor((color >> 0) & 255, (color >> 8) & 255, (color >> 16) & 255, (color >> 24) & 255);
    }
    Colors.unpack = unpack;
    function cssToPacked(input) {
        // TODO: Optimize
        return RgbColor.parseColorString(input).pack();
    }
    Colors.cssToPacked = cssToPacked;
    function packedToCss(packedColor) {
        const values = Colors.unpack(packedColor);
        if (values.a !== 255) {
            return 'rgba(' + values.r + ',' + values.g + ',' + values.b + ',' + values.a + ')';
        }
        return 'rgb(' + values.r + ',' + values.g + ',' + values.b + ')';
    }
    Colors.packedToCss = packedToCss;
    Colors.WHITE = Colors.pack(255, 255, 255);
    Colors.BLACK = 0;
})(Colors || (Colors = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmdiQ29sb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi90cy9SZ2JDb2xvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxRQUFRO0lBRU07SUFBZTtJQUFlO0lBQWU7SUFBaEUsWUFBbUIsQ0FBTSxFQUFTLENBQU0sRUFBUyxDQUFNLEVBQVMsSUFBUyxHQUFHO1FBQXpELE1BQUMsR0FBRCxDQUFDLENBQUs7UUFBUyxNQUFDLEdBQUQsQ0FBQyxDQUFLO1FBQVMsTUFBQyxHQUFELENBQUMsQ0FBSztRQUFTLE1BQUMsR0FBRCxDQUFDLENBQVc7SUFBRyxDQUFDO0lBRWhGLE9BQU87UUFDTixPQUFPLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFRCxLQUFLO1FBQ0osT0FBTyxNQUFNLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO0lBQy9FLENBQUM7SUFFRCxJQUFJO1FBQ0gsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRUQsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEtBQWE7UUFDcEMsSUFBSSxLQUFLLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7WUFDOUIsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7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LFFBMEJmIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgUmdiQ29sb3Ige1xuXG5cdGNvbnN0cnVjdG9yKHB1YmxpYyByOiBpbnQsIHB1YmxpYyBnOiBpbnQsIHB1YmxpYyBiOiBpbnQsIHB1YmxpYyBhOiBpbnQgPSAyNTUpIHt9XG5cblx0aXNCbGFjaygpIHtcblx0XHRyZXR1cm4gdGhpcy5yID09PSAwICYmIHRoaXMuZyA9PT0gMCAmJiB0aGlzLmIgPT09IDA7XG5cdH1cblxuXHR0b0NzcygpOiBzdHJpbmcge1xuXHRcdHJldHVybiAncmdiKCcgKyB0aGlzLnIgKyAnLCcgKyB0aGlzLmcgKyAnLCcgKyB0aGlzLmIgKyAnLCcgKyB0aGlzLmEvMjU1ICsgJyknO1xuXHR9XG5cblx0cGFjaygpOiBQYWNrZWRDb2xvciB7XG5cdFx0cmV0dXJuIENvbG9ycy5wYWNrKHRoaXMuciwgdGhpcy5nLCB0aGlzLmIsIHRoaXMuYSk7XG5cdH1cblxuXHRzdGF0aWMgcGFyc2VDb2xvclN0cmluZyhpbnB1dDogc3RyaW5nKTogUmdiQ29sb3Ige1xuXHRcdGlmIChpbnB1dC5zdGFydHNXaXRoKCdyZ2IoJykpIHtcblx0XHRcdGNvbnN0IHZhbHVlcyA9IGlucHV0LnN1YnN0cig0KS5zcGxpdCgnLCcpO1xuXHRcdFx0cmV0dXJuIG5ldyBSZ2JDb2xvcihwYXJzZUludCh2YWx1ZXNbMF0sIDEwKSwgcGFyc2VJbnQodmFsdWVzWzFdLCAxMCksIHBhcnNlSW50KHZhbHVlc1syXSwgMTApKTtcblx0XHR9XG5cblx0XHRpZiAoaW5wdXQuc3RhcnRzV2l0aCgnIycpIHx8IGlucHV0Lmxlbmd0aCA9PT0gNikge1xuXHRcdFx0cmV0dXJuIG5ldyBSZ2JDb2xvcihcblx0XHRcdFx0cGFyc2VJbnQoaW5wdXQuc3Vic3RyKDAsIDIpLCAxNiksXG5cdFx0XHRcdHBhcnNlSW50KGlucHV0LnN1YnN0cigyLCAyKSwgMTYpLFxuXHRcdFx0XHRwYXJzZUludChpbnB1dC5zdWJzdHIoNCwgMiksIDE2KVxuXHRcdFx0KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbmV3IFJnYkNvbG9yKDI1NSwgMjU1LCAyNTUpO1xuXHR9XG5cbn1cblxubmFtZXNwYWNlIENvbG9ycyB7XG5cblx0ZXhwb3J0IGZ1bmN0aW9uIHBhY2socjogaW50LCBnOiBpbnQsIGI6IGludCwgYTogaW50ID0gMjU1KTogUGFja2VkQ29sb3Ige1xuXHRcdHJldHVybiAociA8PCAwKSB8IChnIDw8IDgpIHwgKGIgPDwgMTYpIHwgKGEgPDwgMjQpO1xuXHR9XG5cblx0ZXhwb3J0IGZ1bmN0aW9uIHVucGFjayhjb2xvcjogUGFja2VkQ29sb3IpOiBSZ2JDb2xvciB7XG5cdFx0cmV0dXJuIG5ldyBSZ2JDb2xvcigoY29sb3IgPj4gMCkgJiAyNTUsIChjb2xvciA+PiA4KSAmIDI1NSwgKGNvbG9yID4+IDE2KSAmIDI1NSwgKGNvbG9yID4+IDI0KSAmIDI1NSk7XG5cdH1cblxuXHRleHBvcnQgZnVuY3Rpb24gY3NzVG9QYWNrZWQoaW5wdXQ6IHN0cmluZyk6IFBhY2tlZENvbG9yIHtcblx0XHQvLyBUT0RPOiBPcHRpbWl6ZVxuXHRcdHJldHVybiBSZ2JDb2xvci5wYXJzZUNvbG9yU3RyaW5nKGlucHV0KS5wYWNrKCk7XG5cdH1cblxuXHRleHBvcnQgZnVuY3Rpb24gcGFja2VkVG9Dc3MocGFja2VkQ29sb3I6IFBhY2tlZENvbG9yKTogc3RyaW5nIHtcblx0XHRjb25zdCB2YWx1ZXMgPSBDb2xvcnMudW5wYWNrKHBhY2tlZENvbG9yKTtcblx0XHRpZiAodmFsdWVzLmEgIT09IDI1NSkge1xuXHRcdFx0cmV0dXJuICdyZ2JhKCcgKyB2YWx1ZXMuciArICcsJyArIHZhbHVlcy5nICsgJywnICsgdmFsdWVzLmIgKyAnLCcgKyB2YWx1ZXMuYSArICcpJztcblx0XHR9XG5cdFx0cmV0dXJuICdyZ2IoJyArIHZhbHVlcy5yICsgJywnICsgdmFsdWVzLmcgKyAnLCcgKyB2YWx1ZXMuYiArICcpJztcblx0fVxuXG5cdGV4cG9ydCBjb25zdCBXSElURSA9IENvbG9ycy5wYWNrKDI1NSwgMjU1LCAyNTUpO1xuXHRleHBvcnQgY29uc3QgQkxBQ0sgPSAwO1xuXG59Il19