"use strict";
const width = 160;
const height = 160;
const MAX_DYNAMIC_LIGHT_Z = 64; // 4 tiles high
const VIEW_COUNT = 5;
let view = 0;
const queryString = window.location.search;
const urlParams = new URLSearchParams(queryString);
const viewParam = urlParams.get('view');
if (typeof viewParam === 'string') {
    const parsedViewParam = parseInt(viewParam);
    if (typeof parsedViewParam === 'number' && !isNaN(parsedViewParam) && parsedViewParam >= 0 && parsedViewParam <= VIEW_COUNT) {
        view = parsedViewParam;
    }
}
class ShapeCastingDemo extends Nitro.Component {
    scale = 3;
    lightX = 80 * this.scale;
    lightY = 80 * this.scale;
    lightZ = 8;
    lightMoved = (x, y, z) => {
        this.lightX = Math.max(0, Math.min(this.lightX + x, width * this.scale));
        this.lightY = Math.max(0, Math.min(this.lightY + y, width * this.scale));
        this.lightZ = Math.max(0, Math.min(this.lightZ + z, MAX_DYNAMIC_LIGHT_Z));
        this.setDirty();
    };
    onResize = (e) => {
        const maxSize = width * 3;
        const newScale = Math.floor(window.innerWidth / maxSize);
        if (newScale !== this.scale) {
            this.lightX *= newScale / this.scale;
            this.lightY *= newScale / this.scale;
            this.scale = newScale;
            this.setDirty();
        }
    };
    wasMounted() {
        window.addEventListener('resize', this.onResize);
    }
    wasUnmounted() {
        window.removeEventListener('resize', this.onResize);
    }
    previousView = () => {
        view--;
        urlParams.set('view', view + '');
        history.replaceState(null, '', "?" + urlParams.toString());
        this.setDirty();
    };
    nextView = () => {
        view++;
        urlParams.set('view', view + '');
        history.replaceState(null, '', "?" + urlParams.toString());
        this.setDirty();
    };
    render(_) {
        const scale = this.scale;
        const ambientLight = 'rgb(64, 64, 64)';
        const dynamicLightX = this.lightX;
        const dynamicLightY = this.lightY;
        const dynamicLightZ = this.lightZ;
        return _.create("div", { key: "root", style: "width: 60%" },
            _.create("div", { style: "text-align: center;" },
                _.create("h2", null, "Simulating 3d lighting in 2d"),
                _.create("button", { style: "font-size: 24px", onClick: this.previousView, disabled: view == 0 }, "Previous"),
                _.create("span", { style: "display: inline-block; width: 20px" }),
                _.create("button", { style: "font-size: 24px", onClick: this.nextView, disabled: view == VIEW_COUNT }, "Next")),
            _.create("div", { style: "width: 100%; display: flex; flex-direction: column; align-items: center;" },
                view === 0 &&
                    _.create("p", null, "Let's start with a 2d image of the game world."),
                view === 0 &&
                    _.create(GameView, { width: width, height: height, scale: scale, mode: ImageMode.PLAIN_IMAGE }),
                view === 1 &&
                    _.create("p", null,
                        "We'll add some ambient light to darken the area as if it were night.",
                        _.create("br", null),
                        _.create("br", null),
                        _.create("p", null, "The following image represents the \"light map\", showing the light affecting each pixel.")),
                view === 1 &&
                    _.create(GameView, { width: width, height: height, scale: scale, mode: ImageMode.LIGHT_MAP, ambientLight: ambientLight }),
                view === 1 &&
                    _.create("p", null, "The pixel colors in the \"light map\" are multiplied against the actual image to produce a lit scene. The scene is very dark until we add lights."),
                view === 1 &&
                    _.create(GameView, { width: width, height: height, scale: scale, mode: ImageMode.PLAIN_IMAGE, ambientLight: ambientLight }),
                view === 1 &&
                    _.create("p", null, "We can add a simple point light that can be moved around. You can use the scroll wheel on the image to move the light up and down in the Z-axis, this will be useful later to show shadowing behavior."),
                view === 1 &&
                    _.create("div", { style: "display: flex" },
                        _.create(GameView, { width: width, height: height, scale: scale, mode: ImageMode.LIGHT_MAP, ambientLight: ambientLight, lightX: dynamicLightX, lightY: dynamicLightY, lightZ: dynamicLightZ, lightMoved: this.lightMoved, renderDynamicLight: true }),
                        _.create("div", { style: 'padding-left: 10px' },
                            _.create(GameView, { width: width, height: height, scale: scale, mode: ImageMode.PLAIN_IMAGE, ambientLight: ambientLight, lightX: dynamicLightX, lightY: dynamicLightY, lightZ: dynamicLightZ, lightMoved: this.lightMoved, renderDynamicLight: true }))),
                view === 1 &&
                    _.create("p", null, "It's not very accurate however, next we'll take into account normal values for each pixel to make the lighting a bit more realistic."),
                view === 2 &&
                    _.create("p", null,
                        "We can add normals(surface vectors) to the gravestone to apply the lighting in a more realistic manner.",
                        _.create("br", null),
                        _.create("br", null),
                        "The following image is the normal map for the scene. It follows the OpenGL coloring format."),
                view === 2 &&
                    _.create(GameView, { width: width, height: height, scale: scale, mode: ImageMode.NORMAL_MAP }),
                view === 2 &&
                    _.create("p", null,
                        "Now when light is moved we can see that the lighting applied to each pixel depends on the surface angle or \"normal vector\" for that pixel.",
                        _.create("br", null),
                        _.create("br", null),
                        "Try moving the light around the gravestone to how the front and edges of the gravestone are lit depending on the position of the light."),
                view === 2 &&
                    _.create("div", { style: "display: flex" },
                        _.create(GameView, { width: width, height: height, scale: scale, mode: ImageMode.LIGHT_MAP, ambientLight: ambientLight, lightX: dynamicLightX, lightY: dynamicLightY, lightZ: dynamicLightZ, lightMoved: this.lightMoved, renderDynamicLight: true, applyNormalMap: true }),
                        _.create("div", { style: 'padding-left: 10px' },
                            _.create(GameView, { width: width, height: height, scale: scale, mode: ImageMode.PLAIN_IMAGE, ambientLight: ambientLight, lightX: dynamicLightX, lightY: dynamicLightY, lightZ: dynamicLightZ, lightMoved: this.lightMoved, renderDynamicLight: true, applyNormalMap: true }))),
                view === 2 &&
                    _.create("p", null,
                        "There is an issue with this naive approach however, it breaks down if you move the light into the center of the gravestone, as we're trying to simulate 3D lighting on a 2D image(where the camera angle has been \"baked in\" to the image).",
                        _.create("br", null),
                        _.create("br", null),
                        "On the next page we'll fix this by taking into account each pixel's location in the \"original\" 3D space."),
                view === 3 &&
                    _.create("p", null,
                        "Image assets of this style are often referred to as \"top-down\", as the image represents a three dimensional object as if the camera was above(and in front of the object) and looking down on it. Since this camera angle is essentially \"baked into\" the image, we can take that into account when calculating how light would hit the object(as if it was still three dimensional). Rather than apply the lighting to each pixel based on its location in the image, we'll apply it based on the \"original location\", the location the image data in the pixel would be located if the camera were actually directly over the object.",
                        _.create("br", null),
                        _.create("br", null),
                        "The following image is the \"pixel offset map\", it maps each pixel to the location it would be if the 2D assets were drawn with the camera directly overhead. A lighter color indicates that the pixel should be treated as residing farther down in the image."),
                view === 3 &&
                    _.create(GameView, { width: width, height: height, scale: scale, mode: ImageMode.PIXEL_OFFSET_MAP }),
                view === 3 &&
                    _.create("p", null, "The lighting is a bit more accurate now, particularly when the light is very close to the gravestone, in front of it or behind it."),
                view === 3 &&
                    _.create("div", { style: "display: flex" },
                        _.create(GameView, { width: width, height: height, scale: scale, mode: ImageMode.LIGHT_MAP, ambientLight: ambientLight, lightX: dynamicLightX, lightY: dynamicLightY, lightZ: dynamicLightZ, lightMoved: this.lightMoved, renderDynamicLight: true, applyNormalMap: true, applyPixelLocationOffsetMap: true }),
                        _.create("div", { style: 'padding-left: 10px' },
                            _.create(GameView, { width: width, height: height, scale: scale, mode: ImageMode.PLAIN_IMAGE, ambientLight: ambientLight, lightX: dynamicLightX, lightY: dynamicLightY, lightZ: dynamicLightZ, lightMoved: this.lightMoved, renderDynamicLight: true, applyNormalMap: true, applyPixelLocationOffsetMap: true }))),
                view === 3 &&
                    _.create("p", null, "Some visual artifacts can still result if the light is placed essentially \"within\" the gravestone, however this may not be an issue in practice as long as light sources are not allowed to pass \"through\" objects such as these."),
                view === 4 &&
                    _.create("p", null,
                        "Let's get more complex now, we'll use a \"height map\" image to produce a \"shadow map\". The height map is similar to the \"pixel offset map\" but indicates the height of the pixel from the ground rather than location in X/Y space. Using the height map we will cast shadows from the light source to create the shadow map, the shadow map indicates what areas are \"in shadow\" and should not be lit by the dynamic light source.",
                        _.create("br", null),
                        _.create("br", null),
                        "The following image is the height map."),
                view === 4 &&
                    _.create(GameView, { width: width, height: height, scale: scale, mode: ImageMode.HEIGHT_MAP }),
                view === 4 &&
                    _.create("p", null, "The following image is the shadow map, with the dynamic light applied to it as well."),
                view === 4 &&
                    _.create(GameView, { width: width, height: height, scale: scale, mode: ImageMode.SHADOW_MAP, ambientLight: ambientLight, lightX: dynamicLightX, lightY: dynamicLightY, lightZ: dynamicLightZ, renderDynamicLight: true }),
                view === 4 &&
                    _.create("p", null, "Now when we move the light around the gravestone casts a distinct shadow on the ground."),
                view === 4 &&
                    _.create("div", { style: "display: flex" },
                        _.create(GameView, { width: width, height: height, scale: scale, mode: ImageMode.LIGHT_MAP, ambientLight: ambientLight, lightX: dynamicLightX, lightY: dynamicLightY, lightZ: dynamicLightZ, lightMoved: this.lightMoved, renderDynamicLight: true, applyNormalMap: true, applyPixelLocationOffsetMap: true, applyShadowMap: true }),
                        _.create("div", { style: 'padding-left: 10px' },
                            _.create(GameView, { width: width, height: height, scale: scale, mode: ImageMode.PLAIN_IMAGE, ambientLight: ambientLight, lightX: dynamicLightX, lightY: dynamicLightY, lightZ: dynamicLightZ, lightMoved: this.lightMoved, renderDynamicLight: true, applyNormalMap: true, applyPixelLocationOffsetMap: true, applyShadowMap: true }))),
                view === 4 &&
                    _.create("p", null, "The shadow does not look correct when the light is in front of the gravestone however, this is due to the shadow map being calculated assuming the camera is directly above the object. On the next page we will fix this by using the \"pixel offset map\" again."),
                view === 5 &&
                    _.create("p", null,
                        "Just as we used a \"pixel offset map\" to correct for the camera angle when calculating the lighting the is applied to the gravestone, we can use the same pixel offsets to more accurately calculate whether a pixel is \"in shadow\".",
                        _.create("br", null),
                        _.create("br", null),
                        "Here is the pixel offset map again:"),
                view === 5 &&
                    _.create(GameView, { width: width, height: height, scale: scale, mode: ImageMode.PIXEL_OFFSET_MAP }),
                view === 5 &&
                    _.create("p", null, "And the shadow offset map again:"),
                view === 5 &&
                    _.create(GameView, { width: width, height: height, scale: scale, mode: ImageMode.SHADOW_MAP, ambientLight: ambientLight, lightX: dynamicLightX, lightY: dynamicLightY, lightZ: dynamicLightZ, renderDynamicLight: true }),
                view === 5 &&
                    _.create("p", null, "The end result, using these tricks we can simulate dynamic 3D lighting within a 2D image."),
                view === 5 &&
                    _.create("div", { style: "display: flex" },
                        _.create(GameView, { width: width, height: height, scale: scale, mode: ImageMode.LIGHT_MAP, ambientLight: ambientLight, lightX: dynamicLightX, lightY: dynamicLightY, lightZ: dynamicLightZ, lightMoved: this.lightMoved, renderDynamicLight: true, applyNormalMap: true, applyPixelLocationOffsetMap: true, applyShadowMap: true, applyPixelOffsetToShadowCalculations: true }),
                        _.create("div", { style: 'padding-left: 10px' },
                            _.create(GameView, { width: width, height: height, scale: scale, mode: ImageMode.PLAIN_IMAGE, ambientLight: ambientLight, lightX: dynamicLightX, lightY: dynamicLightY, lightZ: dynamicLightZ, lightMoved: this.lightMoved, renderDynamicLight: true, applyNormalMap: true, applyPixelLocationOffsetMap: true, applyShadowMap: true, applyPixelOffsetToShadowCalculations: true }))),
                view === 5 &&
                    _.create("p", null,
                        "Is this technique usable within a game? Almost certainly not in it's current state due to performance issues, iterating over and calculating the lighting to be applied to each pixel using the CPU is very slow.",
                        _.create("br", null),
                        _.create("br", null),
                        "Utilizing SIMD could speed it up but I doubt it would be enough once you increase the world size and add multiple light sources.",
                        _.create("br", null),
                        _.create("br", null),
                        "Perhaps it would be possible to perform these lighting calculations within a shader, but at that point why not just switch to a true 3D lighting model.")),
            _.create("p", { style: "text-align: center;" },
                _.create("button", { style: "font-size: 24px", onClick: this.previousView, disabled: view == 0 }, "Previous"),
                _.create("span", { style: "display: inline-block; width: 20px" }),
                _.create("button", { style: "font-size: 24px", onClick: this.nextView, disabled: view == VIEW_COUNT }, "Next")));
    }
}
//# sourceMappingURL=data:application/json;base64,